package mx.ine.observadoresINE.bo.impl;

import java.util.ArrayList;
import java.util.List;

import javax.enterprise.context.SessionScoped;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import mx.ine.common.fechas.impl.ValidacionFechas;
import mx.ine.observadoresINE.dto.DTOFiltroReporteAcciones;
import mx.ine.observadoresINE.dto.DTOReportesParametros;
import mx.ine.observadoresINE.helper.HLPReportesEncabezado;
import mx.ine.observadoresINE.mb.MBReporteAcciones;
import mx.ine.observadoresINE.util.Utilidades;
import mx.org.ine.servicios.query.QRYContainerInterface;

/**
 * Bussines Object para el reporte ACCIONES DE PROMOCION
 * 
 * @author jpachecov
 *
 */
@Component("boReporteAcciones")
@Scope("prototype")
public class BOReporteAcciones {
	/**
	 * Log
	 */
	private static final Log log = LogFactory.getLog(BOReporteAcciones.class);
	
	private final String base_query_name = "query_reporte_acciones_promocion";
	
	/**
	 * Contenedor de queries.
	 */
	@Autowired
	@Qualifier("qryContainer")
	@SessionScoped
	private QRYContainerInterface qryContainer;
	
	/**
	 * Método que devuelve el query construido dependiendo de los parámetros o
	 * filtros dados.
	 * 
	 * @param datos
	 * @return
	 */
	public String getQuery(DTOFiltroReporteAcciones datos) {
		String query = "";

		switch (datos.getNivel()) {
		case "OC":
			if (datos.getTipoReporte().equals("L")) {

				break;
			}
			break;
		case "JL":
			if (datos.getTipoReporte().equals("L")) {

				break;
			}
			break;
		case "JD":
			// No hay concentrado
			// Solo listado
			query = qryContainer.getQuery(base_query_name + "_JD");
			query = asignaParametros(datos, query);
			log.info("query");
			log.info(query);
			break;
		}

		return query;
	}

	/**
	 * Devuelve un objeto del tipo DTOREportesParametros que servirá para
	 * visualizar la tabla.
	 * 
	 * @param data.
	 *            La lista de registros del reporte.
	 * @return
	 */
	public DTOReportesParametros createTableParameters(List<Object[]> data) {
		DTOReportesParametros dto = new DTOReportesParametros();
		dto.setTituloReporte("Un titulo de mi reporte");
		dto.setColumnas(5);
		dto.setListaDatos(data);
		dto.setEncabezado(obtenListaEncabezado(dto));
		return dto;
	}
	
	public List<HLPReportesEncabezado> obtenListaEncabezado(DTOReportesParametros dto){
		List<HLPReportesEncabezado> lista = new ArrayList<HLPReportesEncabezado>();
		
		log.info("Se inicializan encabezados");
		lista = new ArrayList<>();
		// Primer encabezado
		HLPReportesEncabezado hlpEncabezado = new HLPReportesEncabezado();
//		hlpEncabezado.ingresarEncabezado(0, 3, 1, Utilidades.mensajeProperties("etiqueta_reportes_agrupaciones_listados"), 1);
//		hlpEncabezado.ingresarEncabezado(1, 1, 1,
//				Utilidades.mensajeProperties("etiqueta_reportes_agrupaciones_total") + dto.getListaDatos().size(), 1);
//		lista.add(hlpEncabezado);

		// Segundo encabezado
		hlpEncabezado = new HLPReportesEncabezado();
		hlpEncabezado.ingresarEncabezado(0, 1, 1, "Estado", 1);
		hlpEncabezado.ingresarEncabezado(1, 1, 1, "Distrito", 1);
		hlpEncabezado.ingresarEncabezado(2, 1, 1, "Fecha", 1);
		hlpEncabezado.ingresarEncabezado(3, 1, 1, "Acción", 1);
		hlpEncabezado.ingresarEncabezado(4, 1, 1, "Descripcion", 1);
		lista.add(hlpEncabezado);
		
		return lista;
	}
	
	private String asignaParametros(DTOFiltroReporteAcciones datos, String query){
		String q = query;
		switch (datos.getNivel()) {
		case "OC":
			if (datos.getTipoReporte().equals("L")) {

				break;
			}
			break;
		case "JL":
			if (datos.getTipoReporte().equals("L")) {

				break;
			}
			break;
		case "JD":
			
			String fecha_ini = ValidacionFechas.dateToString("dd/MM/yyyy", datos.getFechaIni());
			String fecha_fin = ValidacionFechas.dateToString("dd/MM/yyyy", datos.getFechaFin());
			q = q.replace(":PROCESO", datos.getUsuario().getIdProcesoElectoral() + "");
			q = q.replace(":DETALLE", datos.getUsuario().getIdDetalleProceso() + "");
			q = q.replace(":ESTADO", datos.getUsuario().getIdEstadoSeleccionado() + "");
			q = q.replace(":DISTRITO", datos.getUsuario().getIdDistritoSeleccionado() + "");
			q = q.replace(":FECHA_MIN", "'" + fecha_ini + "'");
			q = q.replace(":FECHA_MAX", "'" + fecha_fin + "'");
			break;
		}

		return q;
	}

}
