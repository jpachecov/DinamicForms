package mx.ine.observadoresINE.mb;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.mapping.Fetchable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import mx.ine.common.fechas.impl.ValidacionFechas;
import mx.ine.observadoresINE.bsd.BSDReporteAccionesInterface;
import mx.ine.observadoresINE.bsd.impl.BSDReportesCursosImpl;
import mx.ine.observadoresINE.dto.DTOFiltroReporteAcciones;
import mx.ine.observadoresINE.dto.DTOReportesParametros;
import mx.ine.observadoresINE.util.Constantes;

/**
 * Clase para el reporte de Acciones de Promoción
 * 
 * @author jpachecov
 *
 */
public class MBReporteAcciones extends MBReportesMenu implements Serializable {

	/**
	 * Serial
	 */
	private static final long serialVersionUID = -3943834454564170075L;

	/**
	 * Log
	 */
	private static final Log log = LogFactory.getLog(MBReporteAcciones.class);

	/**
	 * BSD 
	 */
	@Autowired
	@Qualifier("bsdReporteAcciones")
	private transient BSDReporteAccionesInterface bsdReporte;

	/**
	 * Para los filtros
	 */
	private DTOFiltroReporteAcciones datos;

	/**
	 * Para mostrar la tabla
	 */
	private boolean muestraTabla;
	
	/**
	 * Método init
	 */
	public void init() {
		try {
			super.init();
			datos = new DTOFiltroReporteAcciones();
			datos.setNivel(nivelOficinaSeleccionado);
			log.info("Nivel:" + datos.getNivel());
			datos.setUsuario(getUsuario());
			setMuestraTabla(false);
			if(datos.getNivel().equals("JD"))
				consultaReporte();
			this.setParametros(getParametrosPdf());
			log.info("Procesos: ");
			log.info(getProcesosString());
		} catch (Exception e) {
			log.error("Error en MBReporteAcciones - init()");
			log.error(e);
			e.printStackTrace();
		}
	}
	
	/**
	 * Método para crear reporte
	 */
	public void consultaReporte(){
		try {
			// Este metodo setea algunaas cosas de dtoParametros
//			super.inicializaParametrosEncabezado();
//			asignaParametrosReporte(bsdReporte.obtenReporte(datos));
//			setMuestraTabla(true);
			log.info("fechaIni: " + datos.getFechaIni().toString());
			log.info("fechaFin: " + datos.getFechaFin().toString());
			log.info("fechaIniString: " + ValidacionFechas.dateToString("dd/MM/yyyy", datos.getFechaIni()) );
		} catch(Exception e){
			log.error("Error en MBReporteAcciones - consultaReporte()");
			log.error(e);
			e.printStackTrace();
		}
	}
	
	/**
	 * Método que asigna en la clase padre los
	 * datos para la visuzalición de la tabla del reporte.
	 * @param dto
	 */
	public void asignaParametrosReporte(DTOReportesParametros dto){
		//TODO asignar en el objeto padre dtoParametros los atributos
		//TODO que vienen en el objeto dto
	}
	
	/**
	 * 
	 */
	public void postProcessXLS(Object document) {
		try {
			super.postProcessXLS(document);			
		} catch(Exception e){
			log.error("Error en postProcessXLS");
			log.error(e);
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 */
	public void exportPDF(){
		try {
			super.exportPDF();
		} catch(Exception e){
			log.error("Error en exportPDF");
			log.error(e);
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @return
	 */
	public Map<String,Serializable> getParametrosPdf(){
		Map<String, Serializable> p = new LinkedHashMap<String, Serializable>();
		p.put(Constantes.PARAMETRO_OBJECT_ESTADO, usuario.getEstadoSeleccionado());
		p.put(Constantes.PARAMETRO_OBJECT_DISTRITO, usuario.getDistritoSeleccionado());
		p.put(Constantes.PARAMETRO_INTEGER_COLUMNAS, 8);
		p.put(Constantes.PARAMETRO_ANCHOS_COLUMNAS, 4);
		p.put(Constantes.PARAMETRO_STRING_TITULO, "un titulo");
		return p;
	}
	
	public void test(){
		log.info("tipoReporte:  " + datos.getTipoReporte());
	}

	public boolean isMuestraTabla() {
		return muestraTabla;
	}

	public void setMuestraTabla(boolean muestraTabla) {
		this.muestraTabla = muestraTabla;
	}

	public DTOFiltroReporteAcciones getDatos() {
		return datos;
	}

	public void setDatos(DTOFiltroReporteAcciones datos) {
		this.datos = datos;
	}
}
