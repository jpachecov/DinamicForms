/**
 * @(#)MBReportesMenu.java 10/07/2017
 * <p>
 * Copyright (C) 2016 Instituto Nacional Electoral (INE).
 * <p>
 * Todos los derechos reservados.
 */
package mx.ine.observadoresINE.mb;

import java.io.IOException;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.faces.context.FacesContext;
import mx.ine.common.ws.administracion.dto.response.DTODetalleDistritoProcesoWS;
import mx.ine.common.ws.administracion.dto.response.DTODetalleEstadoProcesoWS;
import mx.ine.common.ws.administracion.dto.response.DTODetalleProcesoWS;
import mx.ine.observadoresINE.bsd.BSDAgrupacionesInterface;
import mx.ine.observadoresINE.bsd.BSDReportesInterface;
import mx.ine.observadoresINE.dto.DTODetalleEstadoProceso;
import mx.ine.observadoresINE.dto.DTOFiltrosReporte;
import mx.ine.observadoresINE.dto.DTOReportesParametros;
import mx.ine.observadoresINE.dto.DTOUsuarioLogin;
import mx.ine.observadoresINE.helper.HLPPDFExporter;
import mx.ine.observadoresINE.util.ApplicationContextUtils;
import mx.ine.observadoresINE.util.Constantes;
import mx.ine.observadoresINE.util.Utilidades;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.component.export.Exporter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

/**
 * Clase para el manejo del menu de los reportes en el sistema de SIJEINE
 *
 * @author Carlos Augusto Escalona Navarro
 * @since 16/03/2017
 * @copyright Direccion de sistemas - INE
 */
public class MBReportesMenu extends MBGeneric implements Serializable {

    private static final Log LOGGER = LogFactory.getLog(MBReportesMenu.class);

    private static final long serialVersionUID = -3133864829547474819L;

    @Autowired
    @Qualifier("bsdReportes")
    protected transient BSDReportesInterface bsdReportes;
    
    /**
     * Data table ligada a la tabla de reporte
     */
    private transient DataTable dataTable;
    
    /**
     * Parámetros para manipular excel y pdf
     */
    private Map<String, Serializable> parametros;
    
    /**
	 * Objeto BSD para los servicios exclusivos del módulo
	 */
	@Autowired
	@Qualifier("bsdAgrupaciones")
	protected transient BSDAgrupacionesInterface bsdAgrupaciones;
    

    protected List<Integer> procesos;
	protected String procesosString;
    protected DTOReportesParametros dtoParametros;
    protected String nombreReporte;
    private static Locale MEX = new Locale("es", "MX");

    //Filtros agrupaciones
    protected Map<String, String> lstFiltrosAgrupaciones;
    protected Integer idFiltroAgrupaciones;
	protected DTOUsuarioLogin usuario;
    
    
	/**
     * Metodo para inicializar los valores de los combos del menu de reportes
     * segun el nivel del rol de usuario logeado
     *
     */
    protected void init() {
        MBAdministradorSistema mbAdmin = (MBAdministradorSistema) ApplicationContextUtils.getApplicationContext().getBean(Constantes.MB_ADMIN);
        setUsuario(mbAdmin.obtenUsuario());
        if (getUsuario().getVersion().equalsIgnoreCase(Utilidades.mensajeProperties("constante_version_rol_oc"))) {
            obtenProceso();
        } 
    }
    
    public void inicializaReporteAgrupaciones() {
		parametros = new LinkedHashMap<>();
		obtenVersion();
		parametros.put(Constantes.PARAMETRO_INTEGER_COLUMNAS, 4);
		parametros.put(Constantes.PARAMETRO_STRING_TITULO,
				Utilidades.mensajeProperties("etiqueta_reportes_agrupaciones"));		
	}


    protected void obtenProceso() {
        String idProcesos = "";
        if (getUsuario().getListaDetalles() != null) {
            procesos = new ArrayList<>();
            Integer proceso = 0;
            for (DTODetalleProcesoWS detalle : getUsuario().getListaDetalles()) {
                if (detalle.getIdProcesoElectoral() != proceso) {
                    if (idProcesos != null && idProcesos != "") {
                        idProcesos += ", ";
                    }
                    idProcesos += detalle.getIdProcesoElectoral();
                    procesos.add(detalle.getIdProcesoElectoral());
                }
                proceso = detalle.getIdProcesoElectoral();
            }
            if (idProcesos != null && idProcesos != "") {
                setProcesosString(idProcesos);
            }
        }
    }

    protected String regresaRol() {
        String rolUsuario = getUsuario().getRolUsuario();
        if (rolUsuario.matches(".*OC.*")) {
            return "OC";
        } else if (rolUsuario.matches(".*JL.*")) {
            return "JL";
        } else if (rolUsuario.matches(".*JD.*")) {
            return "JD";
        }
        return null;
    }

    public void inicializaParametrosEncabezado() {
        dtoParametros = new DTOReportesParametros();
        Date fecha = new Date();
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MMMM/yyyy HH:mm", MEX);
        Integer idEstado = getUsuario().getIdEstadoSeleccionado();
        Integer idDistrito = getUsuario().getIdDistritoSeleccionado();
        if (idEstado != null && idEstado > 0) {
            localizaEstado(idEstado);
        } else {
            dtoParametros.setDescEntidad("OFICINAS CENTRALES");
        }
        if (idDistrito != null && idDistrito > 0) {
            dtoParametros.setIdDistrito(getUsuario().getIdDistritoSeleccionado());            
            localizaDistrito(idDistrito);
        }
        dtoParametros.setFechaHora(formateador.format(fecha));
    }

    /**
     * Método encargado de localizar el estado seleccionado de una lista
     * @param idEstado 
     */
    private void localizaEstado(Integer idEstado) {
//        for (DTODetalleEstadoProceso estado : entidadesFederativas) {
//            if (estado.getIdEstado().equals(idEstado)) {
//                dtoParametros.setDescEntidad(estado.getNombreEstado());
//                break;
//            }
//        }
    }

    /**
     * Método encargado de localizar el distrito seleccionado de una lista
     * @param idDistrito 
     */
    private void localizaDistrito(Integer idDistrito) {
//        for (DTODetalleDistritoProcesoWS distrito : distritos) {
//            if (distrito.getIdDistrito().equals(idDistrito)) {
//                dtoParametros.setDescDistrito(distrito.getNombreDistrito());
//                break;
//            }
//        }
    }
    
    /**
     * Método encargado de exportar la tabla a formato PDF
     *
     */
    public void exportPDF(String titulo) throws IOException {
        // TODO revisar por qué está la etiqueta del reporte de agrupaciones
    	FacesContext context = FacesContext.getCurrentInstance();
        Exporter exporter = new HLPPDFExporter(parametros);
        exporter.export(context, dataTable, titulo,
                    false, false, "ISO-8859-1", null, null);
        context.responseComplete();
    }
    
    /**
     * Método encargado de obtener la versión del sistema al entrar al reporte
     * 
     */
    private void obtenVersion(){
    	DTOUsuarioLogin usuario = getUsuario();
        Integer idEstado = usuario.getIdEstadoSeleccionado() == null ? 0 : 
        	usuario.getIdEstadoSeleccionado();
        Integer idDistrito = usuario.getIdDistritoSeleccionado() == null ? 0 : 
        	usuario.getIdDistritoSeleccionado();
        //Version OC y JL
        if(idEstado.intValue() >= 0 && idDistrito.intValue() == 0){
        	parametros.put(Constantes.PARAMETRO_OBJECT_ESTADO, 
        			usuario.getEstadoSeleccionado());
//            dto.setVersion(Constantes.OC);
        }
        /*else if(idEstado.intValue() > 0 && idDistrito.intValue() == 0){
//            dto.setVersion(Constantes.JL);
            parametros.put(Constantes.PARAMETRO_OBJECT_ESTADO, 
            		usuario.getEstadoSeleccionado());
        }*/
        //Version JD
        else if(idEstado.intValue() > 0 & idDistrito.intValue() > 0){
//        	dto.setVersion(Constantes.JD);
            parametros.put(Constantes.PARAMETRO_OBJECT_ESTADO, 
            		usuario.getEstadoSeleccionado());
            parametros.put(Constantes.PARAMETRO_OBJECT_DISTRITO, 
            		usuario.getDistritoSeleccionado());
        }
    }

    /*****************************GETTERS AND SETTERS**************************************/

    public DTOUsuarioLogin getUsuario() {
		return usuario;
	}

	public void setUsuario(DTOUsuarioLogin usuario) {
		this.usuario = usuario;
	}

    public DTOReportesParametros getDtoParametros() {
        return dtoParametros;
    }

    public void setDtoParametros(DTOReportesParametros dtoParametros) {
        this.dtoParametros = dtoParametros;
    }
    
    public Map<String, String> getLstFiltrosAgrupaciones() {
		return lstFiltrosAgrupaciones;
	}

	public void setLstFiltrosAgrupaciones(
			Map<String, String> lstFiltrosAgrupaciones) {
		this.lstFiltrosAgrupaciones = lstFiltrosAgrupaciones;
	}

	public Integer getIdFiltroAgrupaciones() {
		return idFiltroAgrupaciones;
	}

	public void setIdFiltroAgrupaciones(Integer idFiltroAgrupaciones) {
		this.idFiltroAgrupaciones = idFiltroAgrupaciones;
	}

	public DataTable getDataTable() {
		return dataTable;
	}

	public void setDataTable(DataTable dataTable) {
		this.dataTable = dataTable;
	}
	
    public String getProcesosString() {
		return procesosString;
	}

	public void setProcesosString(String procesosString) {
		this.procesosString = procesosString;
	}
	
}
