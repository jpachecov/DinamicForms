/**
 * @(#)MBReporteControlObs.java 8/08/2017
 * <p>
 * Copyright (C) 2016 Instituto Nacional Electoral (INE).
 * <p>
 * Todos los derechos reservados.
 */
package mx.ine.observadoresINE.mb;

import java.io.Serializable;
import java.util.ArrayList;
import mx.ine.observadoresINE.dto.DTOFiltrosReporte;
import mx.ine.observadoresINE.dto.DTOList;
import mx.ine.observadoresINE.dto.form.FormRepControlObs;
import mx.ine.observadoresINE.helper.HLPReporteControlObs;
import mx.ine.observadoresINE.util.ApplicationContextUtils;
import mx.ine.observadoresINE.util.Constantes;
import mx.ine.observadoresINE.util.Utilidades;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author Helaine Flores Cervantes
 * @since 8/08/2017
 * @copyright Direccion de sistemas - INE
 */
public class MBReporteControlObs extends MBReportesMenu implements Serializable {

    private static final long serialVersionUID = 3814202258121167928L;

    private Boolean muestraTabla;
    FormRepControlObs formFiltros;

    private static final Log LOGGER = LogFactory.getLog(MBReporteControlObs.class);

    @Override
    public void init() {
        MBAdministradorSistema mbAdmin = (MBAdministradorSistema) ApplicationContextUtils.getApplicationContext().getBean(Constantes.MB_ADMIN);
        this.dtoFiltros = new DTOFiltrosReporte();
        this.dtoFiltros.setUsuario(mbAdmin.obtenUsuario());
        formFiltros = new FormRepControlObs();
        formFiltros.setOpcionDeFechas(true);
        formFiltros.setNivelOficinas(1);
        muestraTabla = false;
        obtenerPrimerNivelFiltros();
    }

    public void consultaReporte() throws Exception {
        Integer idEstado = obtenUsuario().getIdEstadoSeleccionado();
        Integer idDistrito = obtenUsuario().getIdDistritoSeleccionado();

        //Se inicializa el encabezado
        super.inicializaParametrosEncabezado();

        if (idEstado == null || idEstado.equals(0)) {
            this.dtoFiltros.setNivelOficinas(1); //OC
            dtoParametros.setAnchoEntidad(2);
            dtoParametros.setAnchoFechaHora(2);
        } else if (!idEstado.equals(0) && idDistrito.equals(0)) {
            this.dtoFiltros.setNivelOficinas(2); //JL
            dtoParametros.setAnchoEntidad(2);
            dtoParametros.setAnchoFechaHora(2);
        } else if (!idEstado.equals(0) && !idDistrito.equals(0)) {
            this.dtoFiltros.setNivelOficinas(3); //JD
            this.dtoFiltros.setIdDistritoSeleccionado(idDistrito);
            dtoParametros.setAnchoEntidad(1);
            dtoParametros.setAnchoDistrito(2);
            dtoParametros.setAnchoFechaHora(1);
        }

        HLPReporteControlObs hlpControlObs;
        hlpControlObs = new HLPReporteControlObs(formFiltros);
        dtoParametros.setTituloReporte(hlpControlObs.getTituloReporte());
        dtoParametros.setColumnas(hlpControlObs.getColumnas());
        dtoParametros.setEncabezado(hlpControlObs.getListaEncabezados());
        dtoParametros.setListaDatos(null);
        nombreReporte = "ReporteControlObs";
        muestraTabla = true;
    }

    /**
     * Método que obtiene el primer nivel de filtros para ser mostrados en vista
     */
    public void obtenerPrimerNivelFiltros() {
        formFiltros.setPrimerNivelFiltros(new ArrayList<DTOList>());
        formFiltros.getPrimerNivelFiltros().add(new DTOList(1, Utilidades.mensajeProperties("etiqueta_reportes_solicitudesDeAcreditacion")));
        formFiltros.getPrimerNivelFiltros().add(new DTOList(2, Utilidades.mensajeProperties("etiqueta_reportes_acreditacionesAprobadas")));
        formFiltros.getPrimerNivelFiltros().add(new DTOList(3, Utilidades.mensajeProperties("etiqueta_reportes_acreditacionesNoAprobadas")));

    }

    /**
     * Método que obtiene el segundo nivel de filtros, el cuál depende de lo
     * seleccionado en el primer filtro.
     */
    public void obtenerSegundoNivelFiltros() {
        formFiltros.setSegundoNivelFiltros(null);
        formFiltros.setTercerNivelFiltros(null);
        formFiltros.setValorSegundoFiltro(null);
        formFiltros.setOpcionDeFechas(false);
        formFiltros.setSegundoNivelFiltros(new ArrayList<DTOList>());
        switch (formFiltros.getValorPrimerFiltro()) {
            case 1://Solicitudes de acreditación
                switch (formFiltros.getNivelOficinas()) {
                    case 1: //Opciones para Oficinas Centrales
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(0, Utilidades.mensajeProperties("etiqueta_reportes_filtro_nacional")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(1, Utilidades.mensajeProperties("etiqueta_reportes_filtro_entidad")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(2, Utilidades.mensajeProperties("etiqueta_reportes_filtro_agrupacion")));
                        break;
                    case 2: //Opciones para Junta Local
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(1, Utilidades.mensajeProperties("etiqueta_reportes_filtro_entidad")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(3, Utilidades.mensajeProperties("etiqueta_reportes_filtro_distrito")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(2, Utilidades.mensajeProperties("etiqueta_reportes_filtro_agrupacion")));
                        break;
                    case 3: //Opciones para Junta Distrital
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(1, Utilidades.mensajeProperties("etiqueta_reportes_filtro_distrito")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(2, Utilidades.mensajeProperties("etiqueta_reportes_filtro_agrupacion")));
                        break;
                    default:
                        break;
                }
                break;
            case 2://Acreditaciones Aprobadas
                switch (formFiltros.getNivelOficinas()) {
                    case 2: //Opciones para Junta Local
                    case 3: //Opciones para Junta Distrital
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(4, Utilidades.mensajeProperties("etiqueta_reportes_filtro_concentrado")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(5, Utilidades.mensajeProperties("etiqueta_reportes_filtro_listadoObservadores")));
                        break;
                    default:
                        break;
                }
                break;
            case 3://Acreditaciones No Aprobdas
                switch (formFiltros.getNivelOficinas()) {
                    case 1: //Opciones para Oficinas Centrales
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(4, Utilidades.mensajeProperties("etiqueta_reportes_filtro_concentrado")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(2, Utilidades.mensajeProperties("etiqueta_reportes_filtro_agrupacion")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(1, Utilidades.mensajeProperties("etiqueta_reportes_filtro_entidad")));
                        break;
                    case 2: //Opciones para Junta Local
                    case 3: //Opciones para Junta Distrital
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(4, Utilidades.mensajeProperties("etiqueta_reportes_filtro_concentrado")));
                        formFiltros.getSegundoNivelFiltros().add(new DTOList(5, Utilidades.mensajeProperties("etiqueta_reportes_filtro_listadoObservadores")));
                        break;
                    default:
                        break;
                }
                break;
            default:
                formFiltros.setSegundoNivelFiltros(null);
                break;
        }
    }

    /**
     * Método que obtiene el Tercer nivel de filtros que serán presentados en la
     * vista, dependiendo de lo seleccionado en el primer filtro
     */
    public void obtenerTercerNivelFiltros() {
        formFiltros.setTercerNivelFiltros(null);
        formFiltros.setValorTercerFiltro(null);
        formFiltros.setOpcionDeFechas(false);
        switch (formFiltros.getValorPrimerFiltro()) {
            case 2://Acreditaciones Aprobadas
                formFiltros.setTercerNivelFiltros(new ArrayList<DTOList>());
                formFiltros.getTercerNivelFiltros().add(new DTOList(6, Utilidades.mensajeProperties("etiqueta_reportes_filtro_aprobadasPorConsejo")));
                formFiltros.getTercerNivelFiltros().add(new DTOList(7, Utilidades.mensajeProperties("etiqueta_reportes_filtro_aprobadasPorConsejoLocal")));
                formFiltros.getTercerNivelFiltros().add(new DTOList(8, Utilidades.mensajeProperties("etiqueta_reportes_filtro_aprobadasPorConsejoGeneral")));
                formFiltros.getTercerNivelFiltros().add(new DTOList(9, Utilidades.mensajeProperties("etiqueta_reportes_filtro_aprobadasPorOPLE")));
                formFiltros.setOpcionDeFechas(true);
                break;
            case 3://Acreditaciones No Aprobadas
                formFiltros.setTercerNivelFiltros(new ArrayList<DTOList>());
                formFiltros.getTercerNivelFiltros().add(new DTOList(11, Utilidades.mensajeProperties("etiqueta_reportes_filtro_denegadas")));
                formFiltros.getTercerNivelFiltros().add(new DTOList(12, Utilidades.mensajeProperties("etiqueta_reportes_filtro_candeladas")));
                //Si seleccionó el listado de observadores del segundo filtro
                if (formFiltros.getValorSegundoFiltro() == 5) {
                    formFiltros.setOpcionDeFechas(true);
                }
                break;

            default:
                formFiltros.setTercerNivelFiltros(null);
                break;
        }
    }

    public void obtenerCuartoNivelFiltros() {
    }

    public Boolean getMuestraTabla() {
        return muestraTabla;
    }

    public void setMuestraTabla(Boolean muestraTabla) {
        this.muestraTabla = muestraTabla;
    }

    public FormRepControlObs getFormFiltros() {
        return formFiltros;
    }

    public void setFormFiltros(FormRepControlObs formFiltros) {
        this.formFiltros = formFiltros;
    }

}
