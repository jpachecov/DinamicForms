/**
 * 
 */
package mx.ine.observadoresINE.mb;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.Serializable;

import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import mx.ine.observadoresINE.util.Utilidades;

/**
 * @author Gerardo López
 * @version 1.0.0
 * @since 28/08/2017
 */
public class MBReporteSolicitudAcreditacion extends MBGeneric implements
		Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8817606290129899111L;

	/**
	 * LOGGER
	 */
	private static final Log log = LogFactory
			.getLog(MBReporteSolicitudAcreditacion.class);

	/**
	 * Carga la ruta del PDF
	 */
	private String rutaPdf;

	/**
	 * Variable para presentar el botón de descarga sí el visor de PDF no se
	 * visualiza
	 */
	private boolean btnDescarga = false;;

	/**
	 * Método inicial, donde se setea la ruta del archivo para poder
	 * visualizarlo en la vista
	 * 
	 * @author Gerardo López
	 * @since 28/08/2017
	 * 
	 */
	public void rutapdf() {
		// Asignamos la ruta de pdf obtenida en validaRutaArchivo(rutaArchivo,
		// nombreArchivo)
		this.rutaPdf = validaRutaArchivo(
				Utilidades
						.mensajeProperties("ruta_pdf_solicitud_de_acreditacion_observadores"),
				Utilidades
						.mensajeProperties("nombre_pdf_solicitud_de_acreditacion_observadores"));
	}

	/**
	 * Método que valida ruta de archivo conforme al ServletPdf para visualizar
	 * el pdf
	 * 
	 * @author Gerardo López
	 * @since 31/08/2017
	 * 
	 * @param nombreArchivo
	 * @return ruta
	 */
	protected String validaRutaArchivo(String rutaArchivo, String nombreArchivo) {
		String ruta = rutaGluster + File.separator + rutaArchivo
				+ File.separator + nombreArchivo;
		File foto = new File(ruta);
		if (foto.exists()) {
			ruta = "/pdf//" + rutaArchivo + File.separator + nombreArchivo;
		} else {
			btnDescarga = true;
		}
		return ruta;
	}

	/**
	 * Método para descargar el archivo pdf
	 * 
	 * @author Gerardo López
	 * @since 31/08/2017
	 * 
	 */
	public void downloadFile() {
		String ruta = rutaGluster
				+ File.separator
				+ Utilidades
						.mensajeProperties("ruta_pdf_solicitud_de_acreditacion_observadores")
				+ File.separator
				+ Utilidades
						.mensajeProperties("nombre_pdf_solicitud_de_acreditacion_observadores");
		File file = new File(ruta);

		FacesContext facesContext = FacesContext.getCurrentInstance();
		HttpServletResponse response = (HttpServletResponse) facesContext
				.getExternalContext().getResponse();
		response.setHeader(
				"Content-Disposition",
				"attachment;filename="
						+ Utilidades
								.mensajeProperties("nombre_pdf_solicitud_de_acreditacion_observadores"));
		response.setContentLength((int) file.length());
		FileInputStream input = null;
		try {
			int i = 0;
			input = new FileInputStream(file);
			byte[] buffer = new byte[1024];
			while ((i = input.read(buffer)) != -1) {
				response.getOutputStream().write(buffer);
				response.getOutputStream().flush();
			}
			facesContext.responseComplete();
			facesContext.renderResponse();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (input != null) {
					input.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * Método get de rutaPdf
	 * 
	 * @return rutaPdf
	 */
	public String getRutaPdf() {
		return rutaPdf;
	}

	/**
	 * Método get de btnDescarga
	 * 
	 * @return btnDescarga
	 */
	public boolean isBtnDescarga() {
		return btnDescarga;
	}

}
