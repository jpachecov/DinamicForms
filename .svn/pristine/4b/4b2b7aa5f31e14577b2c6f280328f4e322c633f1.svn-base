package mx.ine.observadoresINE.dao;

import java.util.List;

import mx.ine.observadoresINE.dto.DTODatosAgrupaciones;
import mx.ine.observadoresINE.dto.db.DTOAgrupaciones;
import mx.ine.observadoresINE.dto.db.DTOAgrupacionesPK;

/**
 * 
 * @author Jean Pierre Pacheco Avila
 *
 */
public interface DAOAgrupacionesInterface {

	/**
	 * Obtiene los datos de una agrupacion
	 * @param pk
	 * @return
	 * @author Jean Pierre Pacheco Avila
	 */
	public DTOAgrupaciones obtenAgrupacion(DTOAgrupacionesPK pk) throws Exception;
	
	/**
	 * 
	 * Guarda una nueva agrupacion dados los datos
	 * capturados en el formulario.
	 * 
	 * Actualiza una agrupacion con los datos capturados.
	 * 
	 * @param agrupacion
	 * @author Jean Pierre Pacheco Avila
	 */
	public void guardaActualiza(DTOAgrupaciones dto) throws Exception;
	
	/**
	 * Obtiene todas las agrupaciones existentes para este
	 * proceso y detalle
	 * @return
	 * @throws Exception
	 * @author Jean Pierre Pacheco Avila
	 */
	public List<DTOAgrupaciones> obtenAgrupaciones(Integer idProceso, Integer idDetalle) throws Exception;
	
	/**
	 * Actualiza los datos de una agrupación.
	 * @param dto
	 * @throws Exception
	 * @author Jean Pierre Pacheco Avila
	 */
	public void actualizaAgrupaciones(DTOAgrupaciones dto) throws Exception;
	
	/**
	 * Método que identifica si el id dado
	 * como parámetro ya existe como idAgrupacion de
	 * alguna agrupacion.
	 * @param id
	 * @return
	 * @throws Exception
	 * @author Jean Pierre Pacheco Avila
	 */
	public boolean existeIdAgrupacion(Integer id) throws Exception;
	
	/**
	 * Método que verifica si existe el nombre de la agrupación en la tabla de agrupaciones.
	 * Si la pk es null entonces se verifica en todos los registros
	 * Si pk no es null, se usa el pk.idAgrupacion para excluir este registro
	 * de la consulta.
	 * @param pk - La pk de la agrupacion a excluir del query.
	 * @param dto - Los datos del formulario que contiene el nombre
	 * de agrupacion a verificar.
	 * @return
	 * @throws Exception
	 * @author Jean Pierre Pacheco Avila
	 */
	public boolean existeNombreAgrupacion(DTOAgrupacionesPK pk, DTODatosAgrupaciones dto) throws Exception;
	
	/**
	 * Método que verifica si existe la abreviatura de la agrupación en la tabla de agrupaciones.
	 * Si la pk es null entonces se verifica en todos los registros
	 * Si pk no es null, se usa el pk.idAgrupacion para excluir este registro
	 * de la consulta.
	 * @param pk - La pk de la agrupacion a excluir del query.
	 * @param dto - Los datos del formulario que contiene la abreviatura
	 * de la agrupacion a verificar.
	 * @return
	 * @throws Exception
	 * @author Jean Pierre Pacheco Avila
	 */
	public boolean existeAbreviAgrupacion(DTOAgrupacionesPK pk, DTODatosAgrupaciones dto) throws Exception;
	
	/**
	 *
	 * Método que elimina una agrupación.
	 *
	 * @param pk - La llave primaria del registro de la agrupacion a eliminar.
	 * @throws Exception
	 * @author Jean Pierre Pacheco Avila
	 */
	public void eliminaAgrupacion(DTOAgrupaciones dto) throws Exception;
}
